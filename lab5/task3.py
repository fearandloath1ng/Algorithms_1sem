'''
В этой задаче вы реализуете программу для моделирования обработки сетевых
пакетов.
• Вам дается серия входящих сетевых пакетов, и ваша 
задача - смоделировать их обработку. Пакеты приходят в определенном порядке. 
Для каждого номера пакета i вы знаете время, когда пакет прибыл Ai и время, 
необходимое процессору для его обработки Pi (в миллисекундах). Есть только один
процессор, и он обрабатывает входящие пакеты в порядке их поступления.
Если процессор начал обрабатывать какой-либо пакет, он не прерывается и
не останавливается, пока не завершит обработку этого пакета, а обработка
пакета i занимает ровно Pi миллисекунд.
Компьютер, обрабатывающий пакеты, имеет сетевой буфер фиксированного
размера S. Когда пакеты приходят, они сохраняются в буфере перед обра-
боткой. Однако, если буфер заполнен, когда приходит пакет (есть S пакетов,
которые прибыли до этого пакета, и компьютер не завершил обработку ни
одного из них), он отбрасывается и не обрабатывается вообще. Если несколь-
ко пакетов поступают одновременно, они сначала все сохраняются в буфере
(из-за этого некоторые из них могут быть отброшены - те, которые описаны
позже во входных данных). Компьютер обрабатывает пакеты в порядке их
поступления и начинает обработку следующего доступного пакета из буфе-
ра, как только заканчивает обработку предыдущего. Если в какой-то момент
компьютер не занят и в буфере нет пакетов, компьютер просто ожидает 
прибытия следующего пакета. Обратите внимание, что пакет покидает буфер и
освобождает пространство в буфере, как только компьютер заканчивает его
обработку.
• Формат ввода или входного файла (input.txt). Первая строка содержит
размер S буфера (1 ≤ S ≤ 10^5) и количество n (1 ≤ n ≤ 10^5) входящих
сетевых пакетов. Каждая из следующих n строк содержит два числа, i-ая
строка содержит время прибытия пакета Ai (0 ≤ Ai ≤ 10^6) и время его
обработки Pi (0 ≤ Pi ≤ 10^3) в миллисекундах. Гарантируется, что последо-
вательность времени прибытия входящих пакетов – неубывающая, однако,
она может содержать одинаковые значения времени прибытия нескольких
пакетов, в этом случае рассматривается пакет, записанный в входном файле
раньше остальных, как прибывший ранее. (Ai ≤ Ai+1 для 1 ≤ i ≤ n − 1.)
• Формат вывода или выходного файла (output.txt). Для каждого пакета
напечатайте время (в миллисекундах), когда процессор начал его 
обрабатывать; или -1, если пакет был отброшен. Вывести ответ нужно в том же
порядке, как как пакеты были описаны во входном файле.
• Ограничение по времени. 10 сек.
• Ограничение по памяти. 512 мб.
'''

import time
 
t_start = time.perf_counter()

from collections import deque

def process_packets(S, n, packets):
    finish_time = deque()
    result = []

    for arrival_time, process_time in packets:
        while finish_time and finish_time[0] <= arrival_time:
            finish_time.popleft()

        if len(finish_time) < S:
            if not finish_time:
                start_time = arrival_time
            else:
                start_time = max(finish_time[-1], arrival_time)
            finish_time.append(start_time + process_time)
            result.append(start_time)
        else:
            result.append(-1)

    return result

with open("task3.txt", "r") as file:
    S, n = map(int, file.readline().split())
    packets = [list(map(int, line.split())) for line in file.readlines()]

output = process_packets(S, n, packets)

with open("output.txt", "w") as file:
    for time in output:
        file.write(str(time) + "\n")

print("Время работы: %s секунд " % (time.perf_counter() - t_start))