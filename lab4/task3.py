'''
Последовательность A, состоящую из символов из множества «(», «)», «[» и
«]», назовем правильной скобочной последовательностью, если выполняется
одно из следующих утверждений:
• A – пустая последовательность;
• первый символ последовательности A – это «(», и в этой последовательности
существует такой символ «)», что последовательность можно представить
как A = (B)C, где B и C – правильные скобочные последовательности;
• первый символ последовательности A – это «[», и в этой последовательности
существует такой символ «]», что последовательность можно представить
как A = (B)C, где B и C – правильные скобочные последовательности.

Так, например, последовательности «(())» и «()[]» являются правильными ско-
бочными последовательностями, а последовательности «[)» и «((» таковыми не являются.
Входной файл содержит несколько строк, каждая из которых содержит 
последовательность символов «(», «)», «[» и «]». Для каждой из этих строк выясните,
является ли она правильной скобочной последовательностью.

• Формат входного файла (input.txt). Первая строка входного файла со-
держит число N (1 ≤ N ≤ 500) – число скобочных последовательностей,
которые необходимо проверить. Каждая из следующих N строк содержит
скобочную последовательность длиной от 1 до 10^4 включительно. 
В каждой из последовательностей присутствуют только скобки указанных выше видов.
• Формат выходного файла (output.txt). Для каждой строки входного файла
(кроме первой, в которой записано число таких строк) выведите в выходной
файл «YES», если соответствующая последовательность является правиль-
ной скобочной последовательностью, или «NO», если не является.
• Ограничение по времени. 2 сек.
• Ограничение по памяти. 256 мб.
'''

import time
 
t_start = time.perf_counter()

def is_valid_brackets(s):
    stack = []
    brackets_map = {')': '(', ']': '['}

    for char in s:
        if char in ['(', '[']:
            stack.append(char)
        elif char in [')', ']']:
            if not stack or stack[-1] != brackets_map[char]:
                return "NO"
            stack.pop()

    return "YES" if not stack else "NO"

with open("task3.txt", "r") as file_input, open("output.txt", "w") as file_output:
    n = int(file_input.readline().strip())
    for _ in range(n):
        sequence = file_input.readline().strip()
        result = is_valid_brackets(sequence)
        file_output.write(result + "\n")

print("Время работы: %s секунд " % (time.perf_counter() - t_start))